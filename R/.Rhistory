y = "Proporción") +
scale_fill_viridis_d(option = "H") + #B o H están bien, se distinguen los humedales
ylim(0, 900) +  # Establece el límite del eje y entre 0 y 900
theme_minimal() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
# ABSOLUTO #####################################################################
ggplot(datos, aes(x = MUCVA__USO, fill = NOMBRE_HUM)) +
geom_bar(position = "stack") +  # Cambia "fill" por "stack" para contar valores absolutos
labs(title = "Número de hectáreas por uso del suelo en 1984 por humedal",
x = "Uso del suelo",
y = "Hectáreas") +
scale_fill_viridis_d(option = "H") + #B o H están bien, se distinguen los humedales
ylim(0, 900) +  # Establece el límite del eje y entre 0 y 900
theme_minimal() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
# ABSOLUTO #####################################################################
ggplot(datos, aes(x = MUCVA__USO, fill = NOMBRE_HUM)) +
geom_bar(position = "stack") +  # Cambia "fill" por "stack" para contar valores absolutos
labs(title = "Número de hectáreas por uso del suelo en 1984 por humedal",
x = "Uso del suelo",
y = "Hectáreas") +
scale_fill_viridis_d(option = "H") + #B o H están bien, se distinguen los humedales
ylim(0, 800) +  # Establece el límite del eje y entre 0 y 800
theme_minimal() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
ggplot(datos, aes(x = SIOSE__USO, fill = NOMBRE_HUM)) +
geom_bar(position = "stack") +  # Cambia "fill" por "stack" para contar valores absolutos
labs(title = "Número de hectáreas por uso del suelo en la actualidad por humedal",
x = "Uso del suelo",
y = "Hectáreas") +
scale_fill_viridis_d(option = "H") + #B o H están bien, se distinguen los humedales
ylim(0, 800) +  # Establece el límite del eje y entre 0 y 800
theme_minimal() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust=0))
################################################################################
# Gráfico de barras apiladas para mostrar la proporción de cada uso del suelo por humedal RELATIVO
ggplot(datos, aes(x = MUCVA__USO, fill = NOMBRE_HUM)) +
geom_bar(position = "fill") +
labs(title = "Proporción de usos del suelo en 1984 por humedal",
x = "Uso del suelo",
y = "Proporción") +
scale_fill_viridis_d(option = "H") + #B o H están bien, se distinguen los humedales
theme_minimal() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
summary(df_area_usos84)
head(df_area_usos84)
View(df_area_usos84)
View(datos)
# Leer los archivos
datos <-read_excel("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Resultados_puntos_analisis.xlsx", range = "A1:O2081")
summary(datos)
head(datos)
pie(table(datos_comp$COMPARACION))
# Leer los archivos
datos_comp <-read_excel("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Resultados_puntos_analisis.xlsx", range = "A1:O2081")
head(datos_comp)
df_area_usos84 <-read_excel("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Resultados_puntos_analisis.xlsx", sheet = 2)
df_area_usos20 <-read_excel("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Resultados_puntos_analisis.xlsx", sheet = 3)
pie(table(datos_comp$COMPARACION))
pie(table(datos_comp$MUCVA__USO)) #Usos 1984
pie(table(datos_comp$SIOSE__USO)) #Usos 2023
################################################################################
# Filtrar datos dentro y fuera de humedales
dentro_humedales <- datos_comp %>% filter(ZONA == "Humedal")
fuera_humedales <- datos_comp %>% filter(ZONA != "Humedal")
# Filtrar humedales costeros e interiores
humedales_costeros <- dentro_humedales %>% filter(GRUPO_TIPO == "Costeros")
humedales_interior <- dentro_humedales %>% filter(GRUPO_TIPO != "Costeros")
# Contar los registros en cada grupo
count_humedales <- datos_comp %>%
group_by(ZONA, GRUPO_TIPO) %>%
summarize(n = n())
print(count_humedales)
# Gráfico de barras para comparar las zonas
ggplot(count_humedales, aes(x = GRUPO_TIPO, y = n, fill = ZONA)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparación de Zonas y Tipos de Humedales",
x = "Tipo de Humedal", y = "Número de Registros") +
theme_minimal()
###############################################################################
# Agrupar por ZONA y COMPARACION, y contar las ocurrencias
comparacion_resumen <- datos_comp %>%
group_by(ZONA, COMPARACION) %>%
summarize(count = n()) %>%
ungroup()
print(comparacion_resumen)
# Calcular proporciones
comparacion_proporciones <- comparacion_resumen %>%
group_by(ZONA) %>%
mutate(proporcion = count / sum(count))
print(comparacion_proporciones)
# Gráfico de barras apiladas
ggplot(comparacion_proporciones, aes(x = ZONA, y = proporcion, fill = COMPARACION)) +
geom_bar(stat = "identity") +
labs(title = "Comparación de Cambios de Uso del Suelo Dentro y Fuera de Humedales",
x = "Zona (Dentro/Fuera del Humedal)", y = "Proporción") +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
# Gráfico de barras con proporciones relativas
ggplot(comparacion_proporciones, aes(x = ZONA, y = proporcion, fill = COMPARACION)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = "Proporciones Relativas de Cambios de Uso del Suelo",
x = "Zona (Dentro/Fuera del Humedal)", y = "Proporción Relativa") +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
# Gráfico de barras agrupadas
ggplot(comparacion_proporciones, aes(x = ZONA, y = proporcion, fill = COMPARACION)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparación de Cambios de Uso del Suelo Dentro y Fuera de Humedales",
x = "Zona (Dentro/Fuera del Humedal)", y = "Proporción") +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
# Gráfico de barras con proporciones relativas
ggplot(comparacion_proporciones, aes(x = ZONA, y = proporcion, fill = COMPARACION)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = "Proporciones Relativas de Cambios de Uso del Suelo",
x = "Zona (Dentro/Fuera del Humedal)", y = "Proporción Relativa") +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
# Gráfico de barras apiladas
ggplot(comparacion_proporciones, aes(x = ZONA, y = proporcion, fill = COMPARACION)) +
geom_bar(stat = "identity") +
labs(title = "Comparación de Cambios de Uso del Suelo Dentro y Fuera de Humedales",
x = "Zona (Dentro/Fuera del Humedal)", y = "Proporción") +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
# Para evaluar los cambios específicos de uso del suelo ########################
# Crear una columna que muestre el cambio de uso del suelo
data <- data %>%
mutate(cambio_uso = paste(MUCVA__USO, "a", SIOSE__USO))
# Leer los archivos
data <-read_excel("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Resultados_puntos_analisis.xlsx", range = "A1:O2081")
# Para evaluar los cambios específicos de uso del suelo ########################
# Crear una columna que muestre el cambio de uso del suelo
datos <- data %>%
mutate(cambio_uso = paste(MUCVA__USO, "a", SIOSE__USO))
# Ver los primeros registros para confirmar
head(data)
# Ver los primeros registros para confirmar
head(datos)
# Ver los primeros registros para confirmar
head(datos)
# Agrupar por zona y tipo de cambio de uso del suelo, y contar las ocurrencias
cambio_uso_resumen <- data %>%
group_by(ZONA, cambio_uso) %>%
summarize(count = n()) %>%
ungroup()
# Para evaluar los cambios específicos de uso del suelo ########################
# Crear una columna que muestre el cambio de uso del suelo
data <- datos %>%
mutate(cambio_uso = paste(MUCVA__USO, "a", SIOSE__USO))
# Ver los primeros registros para confirmar
head(data)
# Agrupar por zona y tipo de cambio de uso del suelo, y contar las ocurrencias
cambio_uso_resumen <- data %>%
group_by(ZONA, cambio_uso) %>%
summarize(count = n()) %>%
ungroup()
# Ver los resultados
print(cambio_uso_resumen)
# Gráfico de barras apiladas por tipo de cambio
ggplot(cambio_uso_resumen, aes(x = ZONA, y = count, fill = cambio_uso)) +
geom_bar(stat = "identity") +
labs(title = "Cambios de Uso del Suelo Dentro y Fuera de Humedales",
x = "Zona (Dentro/Fuera del Humedal)", y = "Número de Cambios") +
theme_minimal()
# Gráfico de barras agrupadas
ggplot(cambio_uso_resumen, aes(x = cambio_uso, y = count, fill = ZONA)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Cambios Específicos de Uso del Suelo por Zona",
x = "Cambio de Uso del Suelo", y = "Número de Cambios") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de barras horizontales
ggplot(cambio_uso_resumen, aes(x = count, y = reorder(cambio_uso, count))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Cambios de Uso del Suelo",
x = "Número de Cambios", y = "Cambio de Uso del Suelo") +
theme_minimal()
# Crear una nueva categoría "Otros" para cambios poco frecuentes
cambio_uso_resumen_simplificado <- cambio_uso_resumen %>%
mutate(cambio_uso = ifelse(count < umbral, "Otros", cambio_uso)) %>%
group_by(cambio_uso) %>%
summarize(count = sum(count)) %>%
ungroup() %>%
arrange(count)
# Gráfico de barras horizontales con categorías simplificadas
ggplot(cambio_uso_resumen_simplificado, aes(x = count, y = reorder(cambio_uso, count))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Cambios de Uso del Suelo (Agrupados)",
x = "Número de Cambios", y = "Cambio de Uso del Suelo") +
theme_minimal()
# Crear una nueva categoría "Otros" para cambios poco frecuentes
cambio_uso_resumen_simplificado <- cambio_uso_resumen %>%
mutate(cambio_uso = ifelse(count < umbral, "Otros", cambio_uso)) %>%
group_by(cambio_uso) %>%
summarize(count = sum(count)) %>%
ungroup() %>%
arrange(count)
# Definir un umbral para agrupar categorías menos frecuentes
umbral <- 5
# Crear una nueva categoría "Otros" para cambios poco frecuentes
cambio_uso_resumen_simplificado <- cambio_uso_resumen %>%
mutate(cambio_uso = ifelse(count < umbral, "Otros", cambio_uso)) %>%
group_by(cambio_uso) %>%
summarize(count = sum(count)) %>%
ungroup() %>%
arrange(count)
# Gráfico de barras horizontales con categorías simplificadas
ggplot(cambio_uso_resumen_simplificado, aes(x = count, y = reorder(cambio_uso, count))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Cambios de Uso del Suelo (Agrupados)",
x = "Número de Cambios", y = "Cambio de Uso del Suelo") +
theme_minimal()
# SOLO CAMBIOS (COMPARACION = DISTINTO) ########################################
# Filtrar los datos para obtener solo los cambios distintos
data_distintos <- data %>%
filter(COMPARACION == "DISTINTO")
# SOLO CAMBIOS (COMPARACION = DISTINTO) ########################################
# Filtrar los datos para obtener solo los cambios distintos
data_distintos <- data %>%
filter(COMPARACION == "DISTINTO")
# Crear una columna que muestre el cambio de uso del suelo
data_distintos <- data_distintos %>%
mutate(cambio_uso = paste(MUCVA__USO, "a", SIOSE__USO))
# Agrupar por tipo de cambio de uso del suelo y contar las ocurrencias
cambio_uso_resumen <- data_distintos %>%
group_by(cambio_uso) %>%
summarize(count = n()) %>%
ungroup()
# Ver los resultados
print(cambio_uso_resumen)
# Gráfico de barras horizontales para cambios distintos
ggplot(cambio_uso_resumen, aes(x = count, y = reorder(cambio_uso, count))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Cambios de Uso del Suelo (DISTINTO)",
x = "Número de Cambios", y = "Cambio de Uso del Suelo") +
theme_minimal()
# Mostrar solo las 10 categorías más comunes
top_cambios <- cambio_uso_resumen %>%
top_n(10, count)
# Gráfico de barras horizontales con las 10 categorías más comunes
ggplot(top_cambios, aes(x = count, y = reorder(cambio_uso, count))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 Cambios de Uso del Suelo (DISTINTO)",
x = "Número de Cambios", y = "Cambio de Uso del Suelo") +
theme_minimal()
# Definir un umbral para agrupar categorías menos frecuentes
umbral <- 5
# Crear una nueva categoría "Otros" para cambios poco frecuentes
cambio_uso_resumen_simplificado <- cambio_uso_resumen %>%
mutate(cambio_uso = ifelse(count < umbral, "Otros", cambio_uso)) %>%
group_by(cambio_uso) %>%
summarize(count = sum(count)) %>%
ungroup() %>%
arrange(count)
# Gráfico de barras horizontales con categorías simplificadas
ggplot(cambio_uso_resumen_simplificado, aes(x = count, y = reorder(cambio_uso, count))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Cambios de Uso del Suelo (DISTINTO, Agrupados)",
x = "Número de Cambios", y = "Cambio de Uso del Suelo") +
theme_minimal()
### Gráfico proporciones
# Agrupar por tipo de cambio de uso del suelo y contar las ocurrencias
cambio_uso_resumen <- data_distintos %>%
group_by(cambio_uso) %>%
summarize(count = n()) %>%
ungroup()
# Calcular la proporción de cada tipo de cambio
cambio_uso_resumen <- cambio_uso_resumen %>%
mutate(proporcion = count / sum(count))
# Ver los resultados
print(cambio_uso_resumen)
# Gráfico de barras horizontales mostrando proporciones
ggplot(cambio_uso_resumen, aes(x = proporcion, y = reorder(cambio_uso, proporcion))) +
geom_bar(stat = "identity", fill = "steelblue") +
scale_x_continuous(labels = scales::percent_format()) +
labs(title = "Proporción de Cambios de Uso del Suelo (DISTINTO)",
x = "Proporción", y = "Cambio de Uso del Suelo") +
theme_minimal()
# Gráfico de barras apiladas con proporciones relativas
ggplot(cambio_uso_resumen_relat, aes(x = "", y = proporcion_relativa, fill = cambio_uso)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Proporción de Cambios de Uso del Suelo (DISTINTO)",
x = "", y = "Proporción") +
theme_minimal() +
theme(axis.text.x = element_blank())
# Crear un dataframe para las proporciones relativas
cambio_uso_resumen_relat <- cambio_uso_resumen %>%
mutate(proporcion_relativa = proporcion)
# Gráfico de barras apiladas con proporciones relativas
ggplot(cambio_uso_resumen_relat, aes(x = "", y = proporcion_relativa, fill = cambio_uso)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Proporción de Cambios de Uso del Suelo (DISTINTO)",
x = "", y = "Proporción") +
theme_minimal() +
theme(axis.text.x = element_blank())
# Gráfico de pie mostrando proporciones
ggplot(cambio_uso_resumen, aes(x = "", y = proporcion, fill = cambio_uso)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Proporción de Cambios de Uso del Suelo (DISTINTO)",
x = "", y = "Proporción") +
theme_minimal() +
theme(axis.text.x = element_blank())
library(raster)
library(rgdal)
# Leer varios archivos raster y apilarlos
rasters <- stack("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone01b_tau.tif",
"C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone02b_tau.tif",
"C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone03b_tau.tif")
# Calcular estadísticas básicas para un único raster
mean_value <- cellStats(raster1, stat='mean')
# Leer un único archivo raster
raster1 <- raster("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone01b_tau.tif")
# Calcular estadísticas básicas para un único raster
mean_value <- cellStats(raster1, stat='mean')
median_value <- cellStats(raster1, stat='median')
sd_value <- cellStats(raster1, stat='sd')
mean_value
sd_value
# Calcular estadísticas para varios rasteres en un stack
mean_values <- cellStats(rasters, stat='mean')
median_values <- cellStats(rasters, stat='median')
sd_values <- cellStats(rasters, stat='sd')
# Leer varios archivos raster y apilarlos
rasters <- stack("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone01b_tau.tif",
"C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone02b_tau.tif",
"C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone03b_tau.tif")
# Leer varios archivos raster y apilarlos
rasters <- stack("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone01b_tau.tif",
"C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone02b_tau.tif",
"C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/zone03b_tau.tif")
?cellStats
# Definir el directorio donde se encuentran los archivos
directory <- "C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/"
# Crear un vector para almacenar todos los nombres de archivos
file_names <- c()
# Rellenar el vector con los nombres de archivos desde zone01b_tau.tif a zone15b_tau.tif
for (i in 1:15) {
file_names <- c(file_names, paste0(directory, "zone", sprintf("%02d", i), "b_tau.tif"))
file_names <- c(file_names, paste0(directory, "zone", sprintf("%02d", i), "_tau.tif"))
}
file_names
# Rellenar el vector con los nombres de archivos desde zone01b_tau.tif a zone15b_tau.tif
for (i in 1:15) {
file_names <- c(file_names, paste0(directory, "zone", sprintf("%02d", i), "b_tau.tif"))
file_names <- c(file_names, paste0(directory, "zone", sprintf(i), "_tau.tif"))
}
file_names <- c(file_names, paste0(directory, "zone", sprintf("%01d", i), "_tau.tif"))
# Rellenar el vector con los nombres de archivos desde zone01b_tau.tif a zone15b_tau.tif
for (i in 1:15) {
file_names <- c(file_names, paste0(directory, "zone", sprintf("%02d", i), "b_tau.tif"))
file_names <- c(file_names, paste0(directory, "zone", sprintf("%01d", i), "_tau.tif"))
}
file_names
# Cargar todos los archivos raster en una lista
raster_list <- lapply(file_names, raster)
rm(list=ls())
# Rellenar el vector con los nombres de archivos desde zone01b_tau.tif a zone15b_tau.tif
for (i in 1:15) {
file_names <- c(file_names, paste0(directory, "zone", sprintf("%02d", i), "b_tau.tif"))
file_names <- c(file_names, paste0(directory, "zone", sprintf("%01d", i), "_tau.tif"))
}
# Definir el directorio donde se encuentran los archivos
directory <- "C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/Mann-Kendall/"
# Crear un vector para almacenar todos los nombres de archivos
file_names <- c()
# Rellenar el vector con los nombres de archivos desde zone01b_tau.tif a zone15b_tau.tif
for (i in 1:15) {
file_names <- c(file_names, paste0(directory, "zone", sprintf("%02d", i), "b_tau.tif"))
file_names <- c(file_names, paste0(directory, "zone", sprintf("%01d", i), "_tau.tif"))
}
# Cargar todos los archivos raster en una lista
raster_list <- lapply(file_names, raster)
View(raster_list)
# Calcular estadísticas para cada raster en la lista
for (i in 1:length(raster_list)) {
raster_data <- raster_list[[i]]
# Calcular estadísticas
mean_value <- cellStats(raster_data, stat='mean')
sd_value <- cellStats(raster_data, stat='sd')
min_value <- cellStats(raster_data, stat='min')
max_value <- cellStats(raster_data, stat='max')
# Guardar estadísticas en una lista
stats_list[[i]] <- data.frame(
file_name = file_names[i],
mean = mean_value,
sd = sd_value,
min = min_value,
max = max_value
)
}
# Crear una lista para almacenar las estadísticas
stats_list <- list()
# Calcular estadísticas para cada raster en la lista
for (i in 1:length(raster_list)) {
raster_data <- raster_list[[i]]
# Calcular estadísticas
mean_value <- cellStats(raster_data, stat='mean')
sd_value <- cellStats(raster_data, stat='sd')
min_value <- cellStats(raster_data, stat='min')
max_value <- cellStats(raster_data, stat='max')
# Guardar estadísticas en una lista
stats_list[[i]] <- data.frame(
file_name = file_names[i],
mean = mean_value,
sd = sd_value,
min = min_value,
max = max_value
)
}
# Crear una lista para almacenar las estadísticas
stats_list
View(stats_list)
as.data.frame(stats_list)
View(as.data.frame(stats_list))
library(tidyr)
?pivot_longer_spec
?here
??here
library(readxl)
datos <-read_excel("C:/Users/VE-UGR-0208/Desktop/TFM/rTFM/Google Earth Engine/LSWI_zones_hum_buf.xlsx")
library(lmerTest)
?lmer
library(lme4)
head(datos)
colnames(datos)
lmer(lswi ~ location + year, data=datos)
shapiro.test(residuals(modelo2)) 			#NORMALIDAD
lillie.test(residuals(modelo2)) 			#NORMALIDAD LILLIEFORS
lmer(lswi ~ location + conservation + wetland_or_buffer + environmental_protection + conservation + sup_ha + (1 | year), data = datos)  # A este se le comprueba todas las asunciones menos la de esfericidad
head(datos)
View(datos)
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = datos, dv=.(wetland_or_buffer), wid=.(lswi), within=.(year), between=.(location), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
??ezANOVA
library(ez)
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = datos, dv=.(wetland_or_buffer), wid=.(lswi), within=.(year), between=.(location), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = datos, dv=.(lswi), wid=.(zone), within=.(year), between=.(location), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
#ANOVA de medidas repetidas####################################################################################################################
#Asunciones: esfericidad y el resto
demo1 <- within(datos, (year <-factor(year)))
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = demo1, dv=.(lswi), wid=.(zone), within=.(year), between=.(location), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
demo1 <- within(datos, (zone <-factor(zone)))
demo1 <- within(datos, (location <-factor(location)))
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = demo1, dv=.(lswi), wid=.(zone), within=.(year), between=.(location), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
#ANOVA de medidas repetidas####################################################################################################################
#Asunciones: esfericidad y el resto
demo1 <- within(datos, (year <-factor(year), (zone <-factor(zone),(location <-factor(location)))
#ANOVA de medidas repetidas####################################################################################################################
#Asunciones: esfericidad y el resto
demo1 <- within(datos, (year <-factor(year)))
demo1 <- within(demo1, (zone <-factor(zone)))
demo1 <- within(demo1, (location <-factor(location)))
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = demo1, dv=.(lswi), wid=.(zone), within=.(year), between=.(location), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
colnames(datos)
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = demo1, dv=.(lswi), wid=.(zone), within=.(year), between=.(wetland_name), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
demo1 <- within(demo1, (wetland_name <-factor(wetland_name)))
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = demo1, dv=.(lswi), wid=.(zone), within=.(year), between=.(wetland_name), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
# A este se le comprueba todas las asunciones menos la de esfericidad
ezANOVA(data = demo1, dv=.(lswi), wid=.(zone), within=.(year), between=.(location), detailed=TRUE) # A este se le comprueba la asunción de esfericidad
################################################################################
library(ggplot2)
# Tendencia del LSWI en el tiempo
ggplot(datos, aes(x = year, y = lswi)) +
geom_line() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Tendencia del LSWI en el tiempo",
x = "Año", y = "LSWI")
# Tendencia del LSWI en el tiempo separado por humedal
ggplot(datos, aes(x = year, y = lswi, color = wetland_name)) +
geom_line() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tendencia del LSWI en el tiempo por Humedal",
x = "Año", y = "LSWI") +
facet_wrap(~ wetland_name, scales = "free_y") +
theme_minimal()
datos_con_r2 <- merge(datos, r2_data, by = "wetland_name")
library(ggplot2)
library(dplyr)
library(broom) # Necesario para la función glance()
# Calcular el R^2 ajustado para cada humedal y unir con los datos originales
datos_con_r2 <- datos %>%
group_by(wetland_name) %>%
do(modelo = lm(lswi ~ year, data = .)) %>%
mutate(adj_r2 = summary(modelo)$adj.r.squared) %>%
ungroup() %>%
left_join(datos, by = "wetland_name")
# Gráfico con R^2 ajustado
ggplot(datos_con_r2, aes(x = year, y = lswi, color = wetland_name)) +
geom_line() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tendencia del LSWI en el tiempo por Humedal",
x = "Año", y = "LSWI") +
facet_wrap(~ wetland_name, scales = "free_y") +
theme_minimal() +
geom_text(data = datos_con_r2 %>% distinct(wetland_name, adj_r2),
aes(x = Inf, y = Inf, label = paste("R² adj: ", round(adj_r2, 3))),
hjust = 1.1, vjust = 1.1, inherit.aes = FALSE, size = 3)
